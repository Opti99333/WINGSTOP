/* =========================
   main.js ‚Äî disco by default
   ========================= */

// ===== DOM refs
const girl        = document.getElementById('girl');
const face        = document.getElementById('face');
const bar         = document.getElementById('bar');
const speech      = document.getElementById('speech');
const hearts      = document.getElementById('hearts');

const feedBtn     = document.getElementById('feed');
const infoBtn     = document.getElementById('info');       // –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Disco/Original
const shutupBtn   = document.getElementById('shutupBtn');

const confetti    = document.getElementById('confetti');

const video       = document.getElementById('wingstopVideo');
const altVideo    = document.getElementById('wingstopAltVideo'); // ¬´–ø–æ—Å—Ç–µ—Ä¬ª-—Ä–æ–ª–∏–∫, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç
const videoSource = video ? video.querySelector('source') : null;

// Disco overlay
const discoFX     = document.getElementById('discoFX');
const spotsBox    = document.getElementById('spots');

// ===== Media paths ‚Äî –ü–†–ê–í–¨ –¢–£–¢
const PRIMARY_VIDEO = "/images/wingstopgirl.mp4";      // –æ—Ä–∏–≥–∏–Ω–∞–ª
const ALT_VIDEO     = "/images/wingstopgirlrock.mp4";  // –¥–∏—Å–∫–æ-–≤–∏–¥–µ–æ (–æ—Å–Ω–æ–≤–Ω–æ–µ –≤ –¥–∏—Å–∫–æ-—Ä–µ–∂–∏–º–µ)

// ===== Bottom strip text ‚Äî –ü–†–ê–í–¨ –¢–£–¢
// –ü—Ä–∏–º–µ—Ä: –∫–æ–Ω—Ç—Ä–∞–∫—Ç ¬´your_CA¬ª. –ù–∏–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∂–¥—ã–µ 4 —Å–∏–º–≤–æ–ª–∞.
const CONTRACT_TEXT = "Coming soon";

// ===== State
let hunger = 75;              // 0..100
let satisfiedAt = 12000;      // ms ‚Äî —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –∫–æ—Ä–º—ë–∂–∫–∏ ¬´–Ω–∞—Å—ã—â–µ–Ω–∞¬ª
let lastFed = 0;

// –í–ê–ñ–ù–û: —Å—Ç–∞—Ä—Ç—É–µ–º –≤ DISCO
let showingAlt = true;        // true = –¥–∏—Å–∫–æ (ALT_VIDEO), false = –æ—Ä–∏–≥–∏–Ω–∞–ª
let switchingSrc = false;     // –∏–¥—ë—Ç –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∑–≤—É–∫ —Å–∞–π—Ç–∞
let siteMuted = true;         // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –∑–∞–≥–ª—É—à–µ–Ω–æ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å autoplay –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö)

const contractTextEl = document.getElementById('contractText');
const copyBtn        = document.getElementById('copyContract');

// Preload –∫–∞—Ä—Ç–∏–Ω–æ–∫
['/images/angry.png','/images/happy.png'].forEach(src => { const i=new Image(); i.src=src; });

// ===== Helpers
function pick(arr){ return arr[Math.floor(Math.random()*arr.length)]; }

function updateShutupUI(){
  if (!shutupBtn) return;
  if (siteMuted){
    shutupBtn.classList.add('is-muted');
    shutupBtn.setAttribute('aria-pressed','true');
    shutupBtn.innerHTML = '<span class="label">SHOUT ALL YOU WANT</span> <span class="ico">üîä</span>';
  } else {
    shutupBtn.classList.remove('is-muted');
    shutupBtn.setAttribute('aria-pressed','false');
    shutupBtn.innerHTML = '<span class="label">SHUT UP</span> <span class="ico">üîá</span>';
  }
}

function updateUI(){
  if (!bar || !girl || !face) return;
  const pct = Math.max(0, Math.min(100, hunger));
  bar.style.width = (100 - pct) + '%';
  bar.classList.toggle('ok', pct < 40);

  const isAngry = pct >= 40;
  girl.classList.toggle('angry', isAngry);
  girl.classList.toggle('happy', !isAngry);
  face.src = isAngry ? '/images/angry.png' : '/images/happy.png';

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ ¬´Feed¬ª, –∫–æ–≥–¥–∞ –≥–æ–ª–æ–¥–Ω–∞—è
  if (feedBtn) {
    feedBtn.classList.toggle('attract', isAngry);
    feedBtn.classList.toggle('danger', pct > 39);
  }

  // –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ, –∫–æ–≥–¥–∞ –≥–µ—Ä–æ–∏–Ω—è ¬´–∑–ª–∞—è¬ª
  if (video){
    if (isAngry) {
      if (video.paused) video.play().catch(()=>{});
    } else {
      if (!video.paused) video.pause();
      video.currentTime = 0;
    }
  }

  syncMediaUI();
}

function spawnHearts(){
  if (!hearts) return;
  const w = hearts.clientWidth || 200;
  for (let i = 0; i < 8; i++) {
    const el = document.createElement('div');
    el.className = 'heart';
    const left = Math.max(6, Math.random() * (w - 12));
    el.style.left = left + 'px';
    el.style.setProperty('--dur', (1.5 + Math.random() * 1.4) + 's');
    el.textContent = Math.random() > 0.5 ? 'üíö' : 'üíñ';
    hearts.appendChild(el);
    setTimeout(() => el.remove(), 2800);
  }
}

function shootConfetti(){
  if (!confetti) return;
  const ctx = confetti.getContext('2d');
  const w = confetti.width = innerWidth;
  const h = confetti.height = innerHeight;
  let pieces = Array.from({length:160}, () => ({
    x: Math.random()*w, y: -20 - Math.random()*h, s: 4 + Math.random()*8,
    vy: 2 + Math.random()*3, vx: -1 + Math.random()*2, a: Math.random()*Math.PI,
    hue: Math.random()<.5 ? 150+Math.random()*60 : 30+Math.random()*40
  }));
  let raf = null;
  function frame(){
    ctx.clearRect(0,0,w,h);
    for (const p of pieces){
      p.x += p.vx; p.y += p.vy; p.a += 0.1;
      ctx.save(); ctx.translate(p.x,p.y); ctx.rotate(p.a);
      ctx.fillStyle = `hsl(${p.hue} 90% 60%)`; ctx.fillRect(-p.s/2,-p.s/2,p.s,p.s*1.4); ctx.restore();
    }
    pieces = pieces.filter(p => p.y <= h + 40);
    if (pieces.length){ raf = requestAnimationFrame(frame); }
    else { ctx.clearRect(0,0,w,h); confetti.width = 0; confetti.height = 0; if (raf) cancelAnimationFrame(raf); }
  }
  frame();
}

function feed(amount=25){
  hunger = Math.max(0, hunger - amount);
  lastFed = Date.now();
  spawnHearts();
  if (hunger === 0) shootConfetti();
  updateUI();
}

// >>> NEW: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ ¬´–≤–∞–∂–Ω—ã–º¬ª –∫–ª–∏–∫–∞–º
function forceUnmute(){
  if (siteMuted){
    siteMuted = false;
    setMutedAll(false);
    updateShutupUI();
    [video, altVideo].forEach(v => {
      if (!v) return;
      if (v.paused) v.play().catch(()=>{});
    });
  }
}

// –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ ¬´–≥–æ–ª–æ–¥–∞¬ª
setInterval(()=>{
  const since = Date.now() - lastFed;
  const drift = since > satisfiedAt ? 2 : 0.5;
  hunger = Math.min(100, hunger + drift);
  updateUI();
}, 300);

// ===== Disco helpers
function createSpots(count=8){
  if (!spotsBox) return;
  spotsBox.innerHTML = '';
  for (let i=0;i<count;i++){
    const s = document.createElement('div');
    s.className = 'spot';
    const x1 = Math.round(-20 + Math.random()*20) + 'vw';
    const y1 = Math.round(Math.random()*100) + 'vh';
    const x2 = Math.round(20 + Math.random()*100) + 'vw';
    const y2 = Math.round(-10 + Math.random()*120) + 'vh';
    const dur = 10 + Math.random()*10;
    s.style.setProperty('--x-start', x1);
    s.style.setProperty('--y-start', y1);
    s.style.setProperty('--x-end',   x2);
    s.style.setProperty('--y-end',   y2);
    s.style.setProperty('--dur',     dur+'s');
    spotsBox.appendChild(s);
  }
}

function toggleDisco(on){
  document.body.classList.toggle('is-disco', !!on);
  if (on) createSpots(9);
  else if (spotsBox) spotsBox.innerHTML = '';
}

// ===== Video visibility / controls
function syncMediaUI(){
  if (!video) return;
  const notPlaying = video.paused || video.ended || video.readyState < 2;

  // –≤–æ –≤—Ä–µ–º—è switchingSrc –ø–æ—Å—Ç–µ—Ä –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  const showAltPoster = notPlaying && !switchingSrc;

  if (altVideo){
    altVideo.style.display = showAltPoster ? 'block' : 'none';
    if (showAltPoster) { altVideo.play().catch(()=>{}); }
    else { altVideo.pause(); altVideo.currentTime = 0; }
  }

  video.style.display = notPlaying ? 'none' : 'block';
}

// ===== Events
// >>> UPDATED: Feed me ‚Äî —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫
if (feedBtn) feedBtn.addEventListener('click', () => {
  forceUnmute();
  feed();
});

// –ë–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ SHUT UP (–≥–ª–æ–±–∞–ª—å–Ω—ã–π mute)
if (shutupBtn){
  shutupBtn.addEventListener('click', () => {
    siteMuted = !siteMuted;
    setMutedAll(siteMuted);

    // –µ—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ ‚Äî –¥–∞—ë–º —à–∞–Ω—Å —Å—Ç–∞—Ä—Ç–∞–Ω—É—Ç—å —Ä–æ–ª–∏–∫–∞–º
    if (!siteMuted){
      [video, altVideo].forEach(v => {
        if (!v) return;
        if (v.paused) v.play().catch(()=>{});
      });
    }
    updateShutupUI();
  });
}

// –ö–Ω–æ–ø–∫–∞ Disco/Original
// >>> UPDATED: —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
if (infoBtn) infoBtn.addEventListener('click', () => {
  forceUnmute();

  if (!video || !videoSource) return;
  const wasPlaying = !video.paused && !video.ended;

  // –Ω–∞ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–∫—Ä—ã–≤–∞–µ–º ¬´–ø–æ—Å—Ç–µ—Ä¬ª
  switchingSrc = true;
  if (altVideo) {
    altVideo.pause();
    altVideo.currentTime = 0;
    altVideo.style.display = 'none';
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
  showingAlt = !showingAlt;
  videoSource.src = showingAlt ? ALT_VIDEO : PRIMARY_VIDEO;
  video.load();

  // –î–∏—Å–∫–æ-–æ–≤–µ—Ä–ª–µ–π + —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  toggleDisco(showingAlt);
  infoBtn.classList.toggle('is-on', showingAlt);
  infoBtn.innerHTML = showingAlt
    ? '<span class="label">Original</span>'
    : '<span class="label">Disco</span><span class="ico">ü™©</span>';

  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ ¬´–≤–∫–ª—é—á–∏ –¥–∏—Å–∫–æ¬ª, –∫–æ–≥–¥–∞ –æ–Ω –≤—ã–∫–ª—é—á–µ–Ω
  infoBtn.classList.toggle('attract', !showingAlt);

  const onReady = () => {
    switchingSrc = false;
    syncMediaUI();
  };
  video.addEventListener('canplay', onReady, { once: true });

  if (wasPlaying) video.play().catch(()=>{});
  syncMediaUI();
});

// ===== One-way unmute (–≤—Å–µ –∫–Ω–æ–ø–∫–∏, –∫—Ä–æ–º–µ SHUT UP, –Ω–µ –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –∑–≤—É–∫, –µ—Å–ª–∏ SHUT UP –∞–∫—Ç–∏–≤–µ–Ω)
function oneWayUnmute(){
  if (siteMuted) return; // –µ—Å–ª–∏ —Å–∞–π—Ç –≤ mute ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (!video && !altVideo) return;
  setMutedAll(false);
}

function bindOneWayUnmute(){
  const btns = Array.from(document.querySelectorAll('button'))
    .filter(btn => btn !== shutupBtn);
  btns.forEach(btn => btn.addEventListener('click', oneWayUnmute, { capture: true }));
}

// ===== –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –º–µ–¥–∏–∞
function getActiveMedia(){
  if (!video && !altVideo) return null;
  const notPlaying = video ? (video.paused || video.ended || video.readyState < 2) : true;
  return (!notPlaying) ? video : altVideo;
}

function setMutedAll(muted){
  [video, altVideo].forEach(m => {
    if (!m) return;
    m.muted = muted;
  });
  // –º—è–≥–∫–∏–π —Å—Ç–∞—Ä—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ –≤—Ä—É—á–Ω—É—é
  if (!muted){
    [video, altVideo].forEach(m => {
      if (!m) return;
      try { if (m.volume === 0) m.volume = 0.6; } catch(_) {}
    });
  }
}

/* ===== Ripple –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===== */
function attachRipple(btn){
  if (!btn) return;
  btn.style.overflow = 'hidden';
  btn.addEventListener('click', (e)=>{
    const r = document.createElement('span');
    r.className = 'ripple';
    const rect = btn.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    r.style.width = r.style.height = size + 'px';
    r.style.left = (e.clientX - rect.left - size/2) + 'px';
    r.style.top  = (e.clientY - rect.top  - size/2) + 'px';
    btn.appendChild(r);
    setTimeout(()=>r.remove(), 650);
  });
}
attachRipple(feedBtn);
attachRipple(infoBtn);
attachRipple(shutupBtn);

// ===== Bottom contract strip
function groupEvery(str, n=4){
  // —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∂–¥—ã–µ n —Å–∏–º–≤–æ–ª–æ–≤, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–∞—á–∞–ª—å–Ω—ã–µ/–∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
  const raw = (str || '').toString().replace(/\s+/g,'').trim();
  return raw.replace(new RegExp(`(.{${n}})`, 'g'), '$1 ').trim();
}

if (contractTextEl){
  const shown = groupEvery(CONTRACT_TEXT);
  contractTextEl.textContent = shown;
  contractTextEl.dataset.raw = CONTRACT_TEXT;
  contractTextEl.addEventListener('click', () => doCopy(contractTextEl.dataset.raw));
}

if (copyBtn){
  copyBtn.addEventListener('click', () => doCopy(contractTextEl?.dataset.raw || CONTRACT_TEXT));
}

async function doCopy(text){
  try{
    await navigator.clipboard.writeText(text);
    copiedUI(true);
  }catch{
    const ta = document.createElement('textarea');
    ta.value = text; document.body.appendChild(ta);
    ta.select(); document.execCommand('copy'); ta.remove();
    copiedUI(true);
  }
}
function copiedUI(){
  if (!copyBtn) return;
  copyBtn.classList.add('is-copied');
  copyBtn.textContent = 'COPIED!';
  setTimeout(()=>{
    copyBtn.classList.remove('is-copied');
    copyBtn.textContent = 'COPY';
  }, 1300);
}

/* =========================
   –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø (–¥–∏—Å–∫–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
   ========================= */

// 1) –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º –¥–∏—Å–∫–æ-–∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π <video> –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
if (video && videoSource) {
  videoSource.src = ALT_VIDEO;
  video.load(); // –±–µ–∑ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è ‚Äî updateUI() —Å–∞–º —Ä–µ—à–∏—Ç, –∫–æ–≥–¥–∞ –∏–≥—Ä–∞—Ç—å
}

// 2) –í–∫–ª—é—á–∞–µ–º –¥–∏—Å–∫–æ-–æ–≤–µ—Ä–ª–µ–π
toggleDisco(true);

// 3) –ü—Ä–∏–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´Disco –≤–∫–ª—é—á—ë–Ω¬ª
if (infoBtn) {
  infoBtn.classList.add('is-on');
  infoBtn.classList.remove('attract');
  infoBtn.innerHTML = '<span class="label">Original</span>';
  infoBtn.style.fontSize = "25px";
}

// 4) –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π mute –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–æ–ª—å—à—É—é –∫–Ω–æ–ø–∫—É
setMutedAll(siteMuted);
updateShutupUI();

// 5) –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä–∞ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã ¬´–ø–æ—Å—Ç–µ—Ä–∞¬ª)
['play','playing','pause','ended','waiting','stalled','suspend','canplay'].forEach(ev=>{
  if (video) video.addEventListener(ev, syncMediaUI);
});

// 6) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º ¬´one-way unmute¬ª –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
bindOneWayUnmute();

// 7) –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
updateUI();
syncMediaUI();

// 8) –ù–∞ —Å—Ç–∞—Ä—Ç–µ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞ ¬´–≤–∫–ª—é—á–∏ –¥–∏—Å–∫–æ¬ª –ù–ï –Ω—É–∂–Ω–∞, —Ç.–∫. —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ
if (infoBtn) infoBtn.classList.toggle('attract', !showingAlt);
// –Ω–µ—Ç –¥–∏—Å–∫–æ —à–∞—Ä–∞, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ, –∞ –ø–æ—Ç–æ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–æ–ø–∞–¥–∞–ª





